{"ast":null,"code":"import _classCallCheck from \"/Users/assafs/Desktop/snake-redux/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/assafs/Desktop/snake-redux/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/assafs/Desktop/snake-redux/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/assafs/Desktop/snake-redux/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/assafs/Desktop/snake-redux/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/assafs/Desktop/snake-redux/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/assafs/Desktop/snake-redux/src/containers/Game.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { BOARD_WIDTH, BOARD_HEIGHT, SQUARE_SIZE, INITIAL_DIRECTION, GAME_SPEED } from \"../constants\";\nimport Board from \"../components/Board\";\nimport Snake from \"../components/Snake\";\nimport Food from \"../components/Food\";\nimport { moveSnake, setFood, setDirection, prependSnake, newGame, loseGame, incrementScore } from \"../actions\";\nimport { checkCollision } from \"../utils\";\n\nvar Game =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Game, _Component);\n\n  function Game() {\n    var _this;\n\n    _classCallCheck(this, Game);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Game).call(this));\n    _this.directionOnNextTick = INITIAL_DIRECTION;\n    _this.resetGame = _this.resetGame.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.checkGameLoss = _this.checkGameLoss.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Game, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setControls();\n      this.generateNewFood();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.checkFoodCollision();\n      this.checkGameLoss();\n    }\n  }, {\n    key: \"checkGameLoss\",\n    value: function checkGameLoss() {\n      var snakeCoords = this.props.snake.coords;\n      var snakeHeadCoords = snakeCoords[snakeCoords.length - 1]; // if you collide w a wall or yourself\n\n      if (!this.props.game.lost && (snakeHeadCoords[0] === -1 || snakeHeadCoords[0] === BOARD_WIDTH || snakeHeadCoords[1] === -1 || snakeHeadCoords[1] === BOARD_HEIGHT || checkCollision(snakeHeadCoords, snakeCoords.slice(0, -1)))) {\n        clearInterval(this.snakeInterval);\n        this.props.loseGame();\n      }\n    }\n  }, {\n    key: \"checkFoodCollision\",\n    value: function checkFoodCollision() {\n      var snakeCoords = this.props.snake.coords;\n      var snakeHeadCoords = snakeCoords[snakeCoords.length - 1];\n      var foodCoords = this.props.food; // if it ate a piece of food\n\n      if (snakeHeadCoords[0] === foodCoords[0] && snakeHeadCoords[1] === foodCoords[1]) {\n        this.generateNewFood();\n        this.props.incrementScore();\n        this.props.prependSnake(snakeCoords[snakeCoords.length - 1].slice());\n      }\n    }\n  }, {\n    key: \"resetGame\",\n    value: function resetGame() {\n      this.props.newGame();\n      this.generateNewFood();\n      clearInterval(this.snakeInterval);\n      this.directionOnNextTick = \"DOWN\";\n    }\n  }, {\n    key: \"generateNewFood\",\n    value: function generateNewFood() {\n      var x = Math.floor(Math.random() * BOARD_WIDTH);\n      var y = Math.floor(Math.random() * BOARD_HEIGHT);\n      if (checkCollision([x, y], this.props.snake.coords)) this.generateNewFood();else this.props.setFood([x, y]);\n    }\n  }, {\n    key: \"setControls\",\n    value: function setControls() {\n      var _this2 = this;\n\n      document.addEventListener(\"keydown\", function (e) {\n        var coords = _this2.props.snake.coords;\n        var x = coords[coords.length - 1][0];\n        var y = coords[coords.length - 1][1];\n\n        switch (e.keyCode) {\n          case 65: // A key\n\n          case 37:\n            // left arrow\n            // make sure we're not trying to move into the snake's body\n            // or move outside the boundaries\n            if (_this2.props.snake.direction !== \"RIGHT\" && x !== 0) _this2.directionOnNextTick = \"LEFT\";\n            break;\n\n          case 68: // D key\n\n          case 39:\n            // right arrow\n            if (_this2.props.snake.direction !== \"LEFT\" && x !== BOARD_WIDTH - 1) _this2.directionOnNextTick = \"RIGHT\";\n            break;\n\n          case 83: // S key\n\n          case 40:\n            // down arrow\n            if (_this2.props.snake.direction !== \"UP\" && y !== BOARD_HEIGHT - 1) _this2.directionOnNextTick = \"DOWN\";\n            break;\n\n          case 87: // W key\n\n          case 38:\n            // up arrow\n            if (_this2.props.snake.direction !== \"DOWN\" && y !== 0) _this2.directionOnNextTick = \"UP\";\n            break;\n\n          case 49:\n            // space\n            if (_this2.props.game.lost) return false;\n            clearInterval(_this2.snakeInterval);\n            _this2.snakeInterval = setInterval(function () {\n              _this2.props.setDirection(_this2.directionOnNextTick);\n\n              _this2.props.moveSnake(_this2.props.snake);\n            }, GAME_SPEED);\n            break;\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"score\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, \"Score: \", this.props.game.score), React.createElement(\"h3\", {\n        className: \"score\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, \"High Score: \", this.props.game.highScore), React.createElement(\"div\", {\n        className: \"board-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(Board, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }), React.createElement(Snake, {\n        coords: this.props.snake.coords,\n        lost: this.props.game.lost,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }), React.createElement(Food, {\n        coords: this.props.food,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }), this.props.game.lost && React.createElement(\"button\", {\n        onClick: this.resetGame,\n        className: \"reset\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, \"RESET\")), React.createElement(\"p\", {\n        className: \"help\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, \"Press spacebar to begin!\"));\n    }\n  }]);\n\n  return Game;\n}(Component);\n\nfunction mapStateToProps(props) {\n  return props;\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    moveSnake: moveSnake,\n    setFood: setFood,\n    setDirection: setDirection,\n    prependSnake: prependSnake,\n    newGame: newGame,\n    loseGame: loseGame,\n    incrementScore: incrementScore\n  }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/Users/assafs/Desktop/snake-redux/src/containers/Game.js"],"names":["React","Component","connect","bindActionCreators","BOARD_WIDTH","BOARD_HEIGHT","SQUARE_SIZE","INITIAL_DIRECTION","GAME_SPEED","Board","Snake","Food","moveSnake","setFood","setDirection","prependSnake","newGame","loseGame","incrementScore","checkCollision","Game","directionOnNextTick","resetGame","bind","checkGameLoss","setControls","generateNewFood","checkFoodCollision","snakeCoords","props","snake","coords","snakeHeadCoords","length","game","lost","slice","clearInterval","snakeInterval","foodCoords","food","x","Math","floor","random","y","document","addEventListener","e","keyCode","direction","setInterval","score","highScore","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport {\n  BOARD_WIDTH,\n  BOARD_HEIGHT,\n  SQUARE_SIZE,\n  INITIAL_DIRECTION,\n  GAME_SPEED\n} from \"../constants\";\nimport Board from \"../components/Board\";\nimport Snake from \"../components/Snake\";\nimport Food from \"../components/Food\";\nimport {\n  moveSnake,\n  setFood,\n  setDirection,\n  prependSnake,\n  newGame,\n  loseGame,\n  incrementScore\n} from \"../actions\";\nimport { checkCollision } from \"../utils\";\n\nclass Game extends Component {\n  constructor() {\n    super();\n\n    this.directionOnNextTick = INITIAL_DIRECTION;\n    this.resetGame = this.resetGame.bind(this);\n    this.checkGameLoss = this.checkGameLoss.bind(this);\n  }\n\n  componentWillMount() {\n    this.setControls();\n    this.generateNewFood();\n  }\n\n  componentDidUpdate() {\n    this.checkFoodCollision();\n    this.checkGameLoss();\n  }\n\n  checkGameLoss() {\n    const snakeCoords = this.props.snake.coords;\n    const snakeHeadCoords = snakeCoords[snakeCoords.length - 1];\n\n    // if you collide w a wall or yourself\n    if (\n      !this.props.game.lost &&\n      (snakeHeadCoords[0] === -1 ||\n        snakeHeadCoords[0] === BOARD_WIDTH ||\n        snakeHeadCoords[1] === -1 ||\n        snakeHeadCoords[1] === BOARD_HEIGHT ||\n        checkCollision(snakeHeadCoords, snakeCoords.slice(0, -1)))\n    ) {\n      clearInterval(this.snakeInterval);\n      this.props.loseGame();\n    }\n  }\n\n  checkFoodCollision() {\n    const snakeCoords = this.props.snake.coords;\n    const snakeHeadCoords = snakeCoords[snakeCoords.length - 1];\n    const foodCoords = this.props.food;\n\n    // if it ate a piece of food\n    if (\n      snakeHeadCoords[0] === foodCoords[0] &&\n      snakeHeadCoords[1] === foodCoords[1]\n    ) {\n      this.generateNewFood();\n      this.props.incrementScore();\n      this.props.prependSnake(snakeCoords[snakeCoords.length - 1].slice());\n    }\n  }\n\n  resetGame() {\n    this.props.newGame();\n    this.generateNewFood();\n    clearInterval(this.snakeInterval);\n    this.directionOnNextTick = \"DOWN\";\n  }\n\n  generateNewFood() {\n    const x = Math.floor(Math.random() * BOARD_WIDTH);\n    const y = Math.floor(Math.random() * BOARD_HEIGHT);\n    if (checkCollision([x, y], this.props.snake.coords)) this.generateNewFood();\n    else this.props.setFood([x, y]);\n  }\n\n  setControls() {\n    document.addEventListener(\"keydown\", e => {\n      const coords = this.props.snake.coords;\n      const x = coords[coords.length - 1][0];\n      const y = coords[coords.length - 1][1];\n\n      switch (e.keyCode) {\n        case 65: // A key\n        case 37: // left arrow\n          // make sure we're not trying to move into the snake's body\n          // or move outside the boundaries\n          if (this.props.snake.direction !== \"RIGHT\" && x !== 0)\n            this.directionOnNextTick = \"LEFT\";\n          break;\n        case 68: // D key\n        case 39: // right arrow\n          if (this.props.snake.direction !== \"LEFT\" && x !== BOARD_WIDTH - 1)\n            this.directionOnNextTick = \"RIGHT\";\n          break;\n        case 83: // S key\n        case 40: // down arrow\n          if (this.props.snake.direction !== \"UP\" && y !== BOARD_HEIGHT - 1)\n            this.directionOnNextTick = \"DOWN\";\n          break;\n        case 87: // W key\n        case 38: // up arrow\n          if (this.props.snake.direction !== \"DOWN\" && y !== 0)\n            this.directionOnNextTick = \"UP\";\n          break;\n        case 49: // space\n          if (this.props.game.lost) return false;\n          clearInterval(this.snakeInterval);\n          this.snakeInterval = setInterval(() => {\n            this.props.setDirection(this.directionOnNextTick);\n            this.props.moveSnake(this.props.snake);\n          }, GAME_SPEED);\n          break;\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1 className=\"score\">Score: {this.props.game.score}</h1>\n        <h3 className=\"score\">High Score: {this.props.game.highScore}</h3>\n        <div className=\"board-wrapper\">\n          <Board />\n          <Snake coords={this.props.snake.coords} lost={this.props.game.lost} />\n          <Food coords={this.props.food} />\n          {this.props.game.lost && (\n            <button onClick={this.resetGame} className=\"reset\">\n              RESET\n            </button>\n          )}\n        </div>\n        <p className=\"help\">Press spacebar to begin!</p>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(props) {\n  return props;\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      moveSnake,\n      setFood,\n      setDirection,\n      prependSnake,\n      newGame,\n      loseGame,\n      incrementScore\n    },\n    dispatch\n  );\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Game);\n"]},"metadata":{},"sourceType":"module"}